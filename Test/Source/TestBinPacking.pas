unit TestBinPacking;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Types, System.Generics.Collections, Math,
  BinPacking.MaxRectsBinPack;

type
  // Test methods for class TMaxRectsBinPack

  TestTMaxRectsBinPack = class(TTestCase)
  strict private
    FMaxRectsBinPack: TMaxRectsBinPack;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInit;
    procedure TestInsert;
    procedure TestInsert1;
    procedure TestOccupancy;
  end;

implementation

uses
  System.SysUtils;

procedure TestTMaxRectsBinPack.SetUp;
begin
  FMaxRectsBinPack := TMaxRectsBinPack.Create;
end;

procedure TestTMaxRectsBinPack.TearDown;
begin
  FMaxRectsBinPack.Free;
  FMaxRectsBinPack := nil;
end;

procedure TestTMaxRectsBinPack.TestInit;
var
  allowFlip: Boolean;
  height: Integer;
  width: Integer;
begin
  width := 500;
  height := 1000;
  allowFlip := False;

  FMaxRectsBinPack.Init(width, height, allowFlip);

  Assert(FMaxRectsBinPack.Occupancy = 0, 'Area is not free');
  Assert(FMaxRectsBinPack.Height = height);
  Assert(FMaxRectsBinPack.Width = width);
end;

procedure TestTMaxRectsBinPack.TestInsert;
var
  method: TFreeRectChoiceHeuristic;
  dst: TList<TRect>;
  rects: TList<TRect>;
  expectedOccupancy : Single;
begin
  FMaxRectsBinPack.Init(500,500,False);

  method := frchRectBestAreaFit;
  dst := TList<TRect>.create;
  rects := TList<TRect>.create;
  rects.Add(Rect(0,0,100, 100));
  rects.Add(Rect(0,0,100, 100));
  rects.Add(Rect(0,0,100, 100));
  rects.Add(Rect(0,0,100, 100));
  rects.Add(Rect(0,0,100, 100));
  rects.Add(Rect(0,0,1000, 1000));

  FMaxRectsBinPack.Insert(rects, dst, method);

  Assert(dst.Count = 5, Format('Count: %d', [dst.Count]));

  expectedOccupancy := 0.20;
  Assert(SameValue(FMaxRectsBinPack.Occupancy, expectedOccupancy));
end;

procedure TestTMaxRectsBinPack.TestInsert1;
var
  ReturnValue: TRect;
  method: TFreeRectChoiceHeuristic;
  height: Integer;
  width: Integer;
begin
  FMaxRectsBinPack.Init(500,500,False);

  method := frchRectBestAreaFit;
  width := 500;
  height := 500;
  ReturnValue := FMaxRectsBinPack.Insert(width, height, method);

  Assert(ReturnValue = Rect(0,0,500,500));
  Assert(SameValue(FMaxRectsBinPack.Occupancy, 1));
end;

procedure TestTMaxRectsBinPack.TestOccupancy;
var
  ReturnValue: Single;
  expectedOccupancy: Single;
begin
  FMaxRectsBinPack.Init(500,500,False);
  ReturnValue := FMaxRectsBinPack.Occupancy;
  Assert(FMaxRectsBinPack.Occupancy = 0);

  FMaxRectsBinPack.Insert(100, 100, frchRectBestAreaFit);

  expectedOccupancy := 0.04;
  Assert(SameValue(FMaxRectsBinPack.Occupancy, expectedOccupancy));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMaxRectsBinPack.Suite);
end.

